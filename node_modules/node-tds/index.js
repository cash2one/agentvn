//--------------------------------------------------------------------------------------------------------
var tds = require("./node-tds.node");
//--------------------------------------------------------------------------------------------------------
tds.init()
//--------------------------------------------------------------------------------------------------------
var Database = exports.Database = function(args,cb) {
    var self = this
    this.conn_count = 0
    this.conn_pool = []
    this.req_queue = []
    this.host = args.host
    this.uid  = args.user
    this.pwd  = args.password
    this.max_reconn_times = 10
    this.cur_reconn_times = 0
    this.query_fun = tds.DBConnnection.prototype.query
    this.call_fun  = tds.DBConnnection.prototype.call
    
    for(var i=0; i< 5 ; i++) {
        this.add_conn( function() {
            if(self.conn_count == 5) {
                cb(self) 
            }
        })
    }

}
//--------------------------------------------------------------------------------------------------------
Database.prototype.add_conn = function(cb) {
    var self = this
    var conn = new tds.DBConnnection()
    conn.open(self.host, self.uid, self.pwd, function(err){
        if(err) {
            console.log("[node-tds]connect to " + self.host + " failed, reconnect after 10 seconds")
            conn.close()
            setTimeout(function(){
                self.add_conn(cb)
            }, 10000)
        }
        
        else {
            this.id = self.conn_count
            self.conn_pool.push(this)
            this.query('SET ANSI_WARNINGS ON', function(err){
                if(err) {
                    console.log('init dbs connection failed:' + err)
                    this.close()
                    return 
                }            
                
                if(cb) {
                    self.conn_count++
                    cb()
                }           
            })    
        }        
    })
}
//--------------------------------------------------------------------------------------------------------
Database.prototype.query = function(db_name, sql, callback) {
    var self = this
    var args = []
    args.push(sql);
    args.push(function(err, rows) {
        if(err && (err.err_no == 20047 || err.err_no == 20006)) {
            self.reconnect(this)
        }
        else {
            self.conn_pool.unshift(this)
        }

        callback.apply(self, arguments);
        self.dispatchRequset()
    })

    self.req_queue.push({
    method  : self.query_fun,  
    db_name : db_name,          
    args : args
    });

    self.dispatchRequset()
}
//--------------------------------------------------------------------------------------------------------
Database.prototype.call = function(db_name, sp_name, params, callback) {
    var self = this
    var args = []
    args.push(sp_name);
    args.push(params);  
    args.push(function(err, rows, result, ret_val) {
        if(err && (err.err_no == 20047 || err.err_no == 20006)) {
            self.reconnect(this)
        }
        else {
            self.conn_pool.unshift(this)
        }

        callback.apply(self, arguments);
        self.dispatchRequset()
    })

    self.req_queue.push({
    method  : self.call_fun,  
    db_name : db_name,
    args    : args
    });

    self.dispatchRequset()
}
//--------------------------------------------------------------------------------------------------------
Database.prototype.close_conn = function() { 
    if(this.conn_pool.length <= 0){
        console.log("[node-tds]no free connection to be closed")
    }
    
    var conn = this.conn_pool.pop()
    conn.close()
    this.conn_count--
}
//--------------------------------------------------------------------------------------------------------
Database.prototype.dispatchRequset = function() {
    var self = this
    if (this.req_queue.length > 0) {
        if(this.conn_pool.length > 0) {
            var conn = this.conn_pool.shift()
            var req_info = this.req_queue.shift()
            
            if(req_info.db_name && req_info.db_name!=conn.db_name) {
                conn.use(req_info.db_name,function(err){
                    if(err){
                        console.log(err)
                        if(err.err_no == 20047) {
                            self.reconnect(this)
                        }
                        return
                    }

                    conn.db_name = req_info.db_name 

                    if(ms.node_tds_debug && req_info.args.length == 3) {
                        var values = []
                        for(var i in req_info.args[1]) {
                            values.push(req_info.args[1][i].value)
                        }
                        ms.u.log(ms.u.format("sp_name: %s, args : %s", req_info.args[0], JSON.stringify(values)))
                    
                    }                  
                    
                    req_info.method.apply(conn, req_info.args);
                })
            }
            
            else {

                if(ms.node_tds_debug && req_info.args.length == 3) {
                    var values = []
                    for(var i in req_info.args[1]) {
                        values.push(req_info.args[1][i].value)
                    }
                    ms.u.log(ms.u.format("sp_name: %s, args : %s", req_info.args[0], JSON.stringify(values)))

                }       
                req_info.method.apply(conn, req_info.args);
            }
        }
    }         
}
//--------------------------------------------------------------------------------------------------------
Database.prototype.set_conn_count = function(count) {
    var self = this
    if(this.conn_count <= count) {
        count -= this.conn_count
        for(var i=0; i<count; i++) {
            this.add_conn( function() { 
                self.dispatchRequset()    
            })
        }          
    }
    
    else {
        count = this.conn_count - count
        for(var i=0; i<count; i++) {
            this.close_conn()
        }
    }
}
//--------------------------------------------------------------------------------------------------------
Database.prototype.reconnect = function(conn) {
    var self = this
    console.log("[node-tds]a connection to " + this.host + " is broken, try to reconnect")
    conn.close()
    this.conn_count--

    this.add_conn( function() {
        self.dispatchRequset()
    }) 
}
//--------------------------------------------------------------------------------------------------------