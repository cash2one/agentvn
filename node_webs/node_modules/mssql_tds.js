//--------------------------------------------------------------------------------------------------------
var tds = require("node-tds")
//--------------------------------------------------------------------------------------------------------
var all_sps_info = {}
//--------------------------------------------------------------------------------------------------------
exports.open = function(args, cb) {
    new tds.Database(args, function(db){
        if(cb) {
            cb(db)
        }
    })
}
//--------------------------------------------------------------------------------------------------------
exports.exec_sql = function(db, db_name, sql_str, cb) {
    db.query(db_name, sql_str, cb)
}
//--------------------------------------------------------------------------------------------------------
exports.exec_sp = function(db, db_name, sp_name, params, cb) {
    if(!db) {
        cb('can not find db:' + db_name)
        return 
    }
    
    get_sp_info(db, db_name, sp_name, function(sp_info) {     
        if( Array.isArray(params) ) {
            for(var i=0,j=0; i<sp_info.length; i++) {
                if(sp_info[i].status == 0) {
                    // if(params[j] === undefined) {
                    //     var err = 'illegal param: ' + sp_info[i].name  + ' is undefined'
                    //     cb(err)
                    //     return         
                    // }
                   
                    sp_info[i].value = params[j]
                    if( sp_info[i].value == '') {
                        sp_info[i].value = null
                    }   
                    j++     
                }
            }
        }

        else {
            for(var i=0; i<sp_info.length; i++) {
                if(sp_info[i].status == 0) {
                    // if(params[sp_info[i].name] === undefined) {
                    //     var err = 'illegal param: ' + sp_info[i].name  + ' is undefined'
                    //     cb(err)
                    //     return         
                    // }                   

                    sp_info[i].value = params[sp_info[i].name]     
                    if( sp_info[i].value == '') {
                        sp_info[i].value = null
                    }                
                }
            }            
        }

        var err = check_params_length(sp_info)
        
        if(err) {
            cb(err)
            return
        }

        db.call(db_name, sp_name, sp_info, function(err, rows, result, ret_value) {      
            if (cb) {
                cb(err, rows, result, ret_value)
            }                   
        })
    })  
}
//--------------------------------------------------------------------------------------------------------
var get_sp_info = function(db, db_name, sp_name, cb) {
    all_sps_info[db_name] = all_sps_info[db_name] || {}
        
    if(!all_sps_info[db_name][sp_name]) {
        var sql_str =
        "SELECT b.name, c.name AS type, b.length, b.isoutparam, b.colorder " +
        "FROM (SELECT * FROM sysobjects as a " +
        "WHERE OBJECTPROPERTY(id, N'IsProcedure') = 1 " +
        "AND ID = object_id(N'[dbo].[" + sp_name + "]')) AS a, " +
        "syscolumns b " + 
        "INNER JOIN dbo.systypes c ON c.xtype = b.xtype " +
        "WHERE a.id = b.id " +  
        "ORDER BY b.colorder"
                
        db.query(db_name, sql_str, function(err, rows) {
            if (err) {
                throw err
                return
            }

            var sp_info = all_sps_info[db_name][sp_name] = []
            for (var i in rows) {
                sp_info[i] = {}
                sp_info[i].name    =  rows[i].name
                sp_info[i].size    =  rows[i].length
                sp_info[i].status  =  rows[i].isoutparam
                switch(rows[i].type) {  
                    case "int"          : sp_info[i].type = 1;break;
                    case "bigint"       : sp_info[i].type = 2;break;
                    case "tinyint"      : sp_info[i].type = 3;break; 
                    case "bit"          : sp_info[i].type = 4;break; 
                    case "decimal"      : sp_info[i].type = 6;break;
                    case "varchar"      : sp_info[i].type = 6;break;
                    case "date"         : sp_info[i].type = 6;
                                          sp_info[i].size = 15;
                                          break;   
                    case "datetime": 
                    case "smalldatetime": sp_info[i].type = 6;
                                          sp_info[i].size = 30;   
                                          break;  
                    default             : console.log('暂不支持的数据类型，请联系蒋爔添加:',rows[i]["type"]); 
                                          return;
                }
            }   
            
            cb(sp_info)     
        })
    
    }   
    else {
        var sp_info = []
        var src = all_sps_info[db_name][sp_name]
        for(var i=0; i<src.length; i++) {
            sp_info[i] = {}
            
            for(var name in src[i]) {
                sp_info[i][name] = src[i][name] 
            }
            
            if(sp_info[i].status == 0){
               sp_info[i].value = null     
            }
        }
        cb(sp_info)
    }
}
//--------------------------------------------------------------------------------------------------------
var check_params_length = function(params) {
    for(var i=0; i<params.length; i++) {
        if(params[i].status == 0 && params[i].type == 6) {
            var value = params[i].value
            if(value && (new Buffer(value.toString()).length > params[i].size)) {
                var err = 'illegal param: ' + params[i].name + ', size: ' + new Buffer(value.toString()).length      
                return err
            }         
        }
    }   
}
//--------------------------------------------------------------------------------------------------------