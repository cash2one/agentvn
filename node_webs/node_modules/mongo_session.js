//---------------------------------------------------------------------------------------------------------
// mongo_session.js
//---------------------------------------------------------------------------------------------------------
var mongo      = require('mongodb')
var util       = require(process.binding('natives').util ? 'util' : 'sys')
var Session    = require('express').session
var Db         = mongo.Db
var Connection = mongo.Connection
var Server     = mongo.Server
var BSON       = mongo.BSONNative
//---------------------------------------------------------------------------------------------------------
var MongoStore = function(options) {
    var self = this

    options = options || {}

    Session.Store.call(this, options)
    
    // Default reapInterval to 10 minutes
    this.reapInterval =  options.reapInterval || 600000
    // Default maxAge to 10 minutes
    this.maxAge       =  options.maxAge       || 600000

    if (this.reapInterval !== -1) {
        setInterval(function(self) {
            self.reap(self.maxAge)
        }, this.reapInterval, this)
    }
    
    var ip           = (options.ip)         ? options.ip         : '127.0.0.1'
    var port         = (options.port)       ? options.port       : 27017
    var server       = (options.server)     ? options.server     : new Server(ip, port, { auto_reconnect : true }, {})
    var db_name      = (options.db)         ? options.db         : 'express-sessions'
    var collection   = (options.collection) ? options.collection : 'sessions'

    this._collection = collection
    this._db         = new Db(db_name, server, { native_parser : true })

    this._db.open(function(err, db) {
        if (err) {
            console.error('open db error:', err)
        }

        db.authenticate("root", "root2", function(err){
            if(err) {
                console.log(err)
            }
        
            else {
                self.clear(function(err) {
                    if(err) {
                        console.error('clear sessein db failed', err)
                    }
                })
            }
        })
    })
}
//---------------------------------------------------------------------------------------------------------
util.inherits(MongoStore, Session.Store);
//---------------------------------------------------------------------------------------------------------
MongoStore.prototype.reap = function(ms) {
    // var thresh = Number(new Date(Number(new Date) - ms))
    var thresh = (new Date()).getTime() - ms

    this._db.collection(this._collection, function(err, collection) {
        collection.remove({ "lastAccess" : { "$lt" : thresh }}, function(err) {
            if(err) {
                console.error('reap error:', err)
            }
        })
    })
}
//---------------------------------------------------------------------------------------------------------
MongoStore.prototype.set = function(sid, sess, fn) {
    this._db.collection(this._collection, function(err, collection) {
        collection.findOne({ _sessionid : sid }, function(err, session_data) {
            if (err) {
                fn && fn(error)
                return
            } 
            
            sess._sessionid = sid

            sess.lastAccess = (new Date()).getTime()
                  
            if (session_data) {
                var method = 'save'
            }
            else {
                var method = 'insert'
            }

            collection[method](sess, function(err, doc) {
                fn && fn(err, doc)
            })
        })
    })
}
//---------------------------------------------------------------------------------------------------------
MongoStore.prototype.get = function(sid, fn) {
    this._db.collection(this._collection, function(err, collection) {
        collection.findOne({ _sessionid : sid }, function(err, session_data) {
            if (err) {
                fn && fn(err)
                return
            }

            if (session_data) {
                session_data = cleanSessionData(session_data)
            }

            fn && fn(null, session_data)
        })
    })
}
//---------------------------------------------------------------------------------------------------------
MongoStore.prototype.destroy = function(sid, fn) {
    this._db.collection(this._collection, function(err, collection) {
        if (err) {
            fn && fn(err)
            return
        }

        collection.remove({ _sessionid : sid }, function(err) {
            fn && fn(err)
        })
    })
}
//---------------------------------------------------------------------------------------------------------
MongoStore.prototype.length = function(fn) {
    this._db.collection(this._collection, function(err, collection) {
        if (err) {
            fn && fn(err)
            return
        }

        collection.count(function(count) {
            fn && fn(null, count)
        })
    })
}
//---------------------------------------------------------------------------------------------------------
MongoStore.prototype.all = function() {
    var arr = []

    this._db.collection(this._collection, function(err, collection) {
        if (err) {
            fn && fn(err)
            return
        }

        collection.find(function(err, cursor) {
            if (err) {
                fn && fn(err)
                return
            }

            cursor.each(function(d) {
                d = cleanSessionData(d)
                arr.push(d)
            })
            
            fn && fn(null, arr)
        })
    })
}
//---------------------------------------------------------------------------------------------------------
MongoStore.prototype.clear = function(fn) {
    this._db.collection(this._collection, function(err, collection) {
        if (err) {
            fn && fn(err)
            return
        }

        collection.remove(function(err) {
            fn && fn(err)
        })
    })
}
//---------------------------------------------------------------------------------------------------------
function cleanSessionData(json) {
    var data = {}

    for (var i in json) {
        data[i] = json[i]
        if (data[i] instanceof Object) {
            if ('low_' in data[i] || 'high_' in data[i]) {
                data[i] = data[i].toNumber()
            }
        }
        
    }

    return data
}
//---------------------------------------------------------------------------------------------------------
module.exports = MongoStore
//---------------------------------------------------------------------------------------------------------