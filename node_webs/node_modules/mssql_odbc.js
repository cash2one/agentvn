//--------------------------------------------------------------------------------------------------------
var odbc = require("odbc")
//--------------------------------------------------------------------------------------------------------
var all_sps_info = {}
//--------------------------------------------------------------------------------------------------------
exports.open = function(conn_str, cb) {
    var db = new odbc.Database()
    db.open(conn_str, function(err) {
        if (cb) {
            cb(db, err)
        }
    })
}
//--------------------------------------------------------------------------------------------------------
exports.use_database = function(db, db_name, cb) {
    if (!db) {
        console.log("error: db not opened")
        return
    }

    if (!db.connected) {
        console.log("error: db not connected")
        return
    }	
	
	var sql_str  = "USE " + db_name 
	db.query(sql_str, cb)
}
//--------------------------------------------------------------------------------------------------------
exports.exec_sql = function(db, db_name, sql_str, cb) {
    if (!db) {
        console.log("error: db not opened")
        return
    }

    if (!db.connected) {
        console.log("error: db not connected")
        return
    }
    
    sql_str = 'USE ' + db_name + '; ' + sql_str

	db.query(sql_str, cb)
}
//--------------------------------------------------------------------------------------------------------
exports.exec_sp = function(db, db_name, sp_name, params, cb) {
    if (!db) {
        console.log("error: db not opened")
        return
    }

    if (!db.connected) {
        console.log("error: db not connected")
        return
    }

	get_sp_info(db, db_name, sp_name, function(sp_info) {
		var sql_str = "{?=call " + db_name + '..' + sp_name + "("
		for(var i=0,j=0; i<sp_info.length; i++)
		{		 
			if(sp_info[i].isoutparam == 0) {
				sp_info[i].param_value = params[j];
				j++;
			}	
			sql_str += "?,"
		}
		sql_str += ")}"
        
		db.query(sql_str, sp_info, function(err, rows, more, result) {
			var ret_value = result[0]
			result.shift()
				
			var output_params = {}
			
			for(var i=0,j=0; i<sp_info.length; i++) {
				if( j==result.length ) {
					break
				}   
				if(sp_info[i].isoutparam == 1) {
					output_params[sp_info[i].param_name] = result[j]
					j++
				}	
			}
			
			if (cb) {
                cb(err, rows, output_params, ret_value)
			}					
		})
	})	
}
//--------------------------------------------------------------------------------------------------------
var get_sp_info = function(db, db_name, sp_name, cb) {
    all_sps_info[db_name] = all_sps_info[db_name] || {}
		
	if(!all_sps_info[db_name][sp_name]) {
		var sql_str =
        "SELECT b.name, c.name AS type, b.length, b.isoutparam, b.colorder " +
        "FROM (SELECT * FROM sysobjects as a " +
        "WHERE OBJECTPROPERTY(id, N'IsProcedure') = 1 " +
        "AND ID = object_id(N'[dbo].[" + sp_name + "]')) AS a, " +
        "syscolumns b " + 
        "INNER JOIN dbo.systypes c ON c.xtype = b.xtype " +
        "WHERE a.id = b.id " +	
	    "ORDER BY b.colorder"

        sql_str = 'USE ' + db_name + '; ' + sql_str
		db.query(sql_str, function(err, rows, more) {
			if (err) {
				throw err
			}
			
			var sp_info = all_sps_info[db_name][sp_name] = []
			for (var i in rows) {
				sp_info[i] = {}
				sp_info[i].param_name   =  rows[i]["name"]
				sp_info[i].param_length =  rows[i]["length"]
				sp_info[i].isoutparam   =  rows[i]["isoutparam"]
				switch(rows[i]["type"]) {	
					case "varchar": sp_info[i].param_type = 1;break;	
					case "int"    : sp_info[i].param_type = 2;break;	
					case "bigint" : sp_info[i].param_type = 2;break;	
					case "bit"    : sp_info[i].param_type = 4;break;	
                    case "datetime": sp_info[i].param_type = 6;break;  
					default       : console.log('暂不支持的数据类型，请联系蒋爔添加:',rows[i]["type"]); return;
				}
			}	
			
			cb(sp_info)		
		})
	
	}	
	else {
        var sp_info = []
        var src = all_sps_info[db_name][sp_name]
        for(var i=0; i<src.length; i++) {
            sp_info[i] = {}
            
            for(var name in src[i]) {
                sp_info[i][name] = src[i][name] 
            }
            
            if(sp_info[i].status == 0){
               sp_info[i].value = null     
            }
        }
        cb(sp_info)
	}
}
//--------------------------------------------------------------------------------------------------------
