//--------------------------------------------------------------------------------------------------------
// util2.js
//--------------------------------------------------------------------------------------------------------
var util   = require('util')
var crypto = require('crypto')
//--------------------------------------------------------------------------------------------------------
exports.to_soap_date = function(date_str) {
    if (!date_str) {
        return
    }

    var d = new Date(date_str)
    var time = d.toLocaleTimeString()
    
    var year  = d.getFullYear() + ''
    var month = ((d.getMonth() + 1) > 9) ? ((d.getMonth() + 1) + '') : ('0' + (d.getMonth() + 1))
    var day   = d.getDate() > 9 ? (d.getDate() + '') : ('0' + d.getDate())

    var soap_date = util.format('%s-%s-%sT%s', year, month, day, time)

    return soap_date
}
//--------------------------------------------------------------------------------------------------------
// check idcard validation
exports.check_idcard = function(idcard) {
    if (invalid_cards[idcard]) {
        return false
    }

    if (!check_age(idcard)) {
        return false
    }

    if (idcard.length == 15) {
        return check_idcard_15(idcard)
    }

    if (idcard.length == 18) {
        return check_idcard_18(idcard)
    }

    return false
}

var invalid_cards = {
    '000000000000000' : true,
    '111111111111111' : true,
}

function check_age(idcard) {
    var birthday = get_birthday_from_idcard(idcard)
    if (!birthday) {
        return false
    }

    var now = new Date()
    if (Date.parse(now) - Date.parse(birthday) <= 0) { // too young, come from future
        return false
    }

    if (now.getYear() - birthday.getYear() > 140) {    // too old
        return false
    }

    return true
}

function simplize_date(d) {
    d.year  = d.getYear() + 1900
    d.month = d.getMonth() + 1
    d.day   = d.getDate()
    d.wday  = d.getDay()

    d.full_date = d.year + '-' + d.month + '-' + d.day

    return d
}

exports.simplize_date = simplize_date

function get_birthday_from_idcard(idcard) {
    if (idcard.length == 18) {
        var year  = idcard.substring(6, 10)

        var month = idcard.substring(10, 12) - 1
        if (month < 0 || month > 11) {
            return false
        }

        var day   = idcard.substring(12, 14)
        if (day < 1 || day > 31) {
            return false
        }

        return simplize_date(new Date(year, month, day))
    }

    if (idcard.length == 15) {
        var year  = '19' + idcard.substring(6, 8)

        var month = idcard.substring(8, 10) - 1
        if (month < 0 || month > 11) {
            return false
        }

        var day   = idcard.substring(10, 12)
        if (day < 1 || day > 31) {
            return false
        }

        return simplize_date(new Date(year, month, day))
    }
}

exports.get_birthday_from_idcard = get_birthday_from_idcard

var all_province_codes = "11x22x35x44x53x12x23x36x45x54x13x31x37x46x61x14x32x41x50x62x15x33x42x51x63x21x34x43x52x64x65x71x81x82x91"

function check_idcard_15(idcard) {
    var province_code = idcard.substring(0, 2)
    var index = all_province_codes.indexOf(province_code)

    return (index >= 0)
}

var verify_codes = [ "1", "0", "X", "9", "8", "7", "6", "5", "4", "3", "2" ]
var wi = [ 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2 ]

function check_idcard_18(idcard) {
    var sum = 0
    for (var i = 0; i < 17; ++i) {
        sum = sum + (idcard[i] * wi[i])
    }
	
    var verify_index = sum % 11
    var verify_bit = verify_codes[verify_index]

    return (idcard[17].toLocaleUpperCase() == verify_bit)
}
//--------------------------------------------------------------------------------------------------------
exports.random_int = function (min, max) {
    var r = Math.random()
    var diff = max - min

    r = parseInt(r * diff + min)
    r = (r < min) ? min : r
    r = (r > max) ? max : r

    return r
}
//--------------------------------------------------------------------------------------------------------
exports.get_req_ip = function(req) {
    var cdn_field = 'Cdn-Src-Ip'
    if (req.header(cdn_field)) {
        return req.header(cdn_field)
    }

    var x_forward_field = 'X-Forwarded-For'
    if (req.header(x_forward_field)) {
        return req.header(x_forward_field)
    }
    
    return req.connection.remoteAddress
}
//--------------------------------------------------------------------------------------------------------
exports.encrypt_by_md5 = function(plaintext) {
    var md5 = crypto.createHash('md5')
    md5.update(plaintext)
    return md5.digest("hex") 
}
//--------------------------------------------------------------------------------------------------------
exports.date_to_ms_datetime = function(date, style) {
    var year    = date.getFullYear()
    var month   = date.getMonth()+1
    var day     = date.getDate()
    var hours   = date.getHours()
    var minutes = date.getMinutes()
    var seconds = date.getSeconds()
    
    if (style == "odbc") {
        return { year:year, month:month, day:day, hours:hours, minutes:minutes, seconds:seconds }
    }
    
    if (style == "tds") {
        return util.format("%d-%d-%d %d:%d:%d", year, month, day, hours, minutes, seconds)        
    }

    console.log("[util2]unknown datetime style")
}
//--------------------------------------------------------------------------------------------------------
exports.set_cookies = function(res, key, value, options) {
    if (typeof value == 'string') {
        options.no_encoding = true
	    var cookie = res.cookie(key, value, options)
        return cookie
    }

    if (typeof value == 'object') {
        var val = ''
        for (var k in value) {
            if (val == '') {
                val = k + '=' + value[k]
            }
            else {
                val = val + '&' + k + '=' + value[k]
            }
        }

        options.no_encoding = true
        var cookie = res.cookie(key, val, options)

        return cookie
    }
}
//--------------------------------------------------------------------------------------------------------
exports.json_escape = function(str) {
    var ep_str = '"' 
        + str
        .replace(/\\/g, "\\\\")
        .replace(/\"/g, "\\\"")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/\t/g, "\\t")
        .replace(/\f/g, "\\f")
        + '"'

    try {
        JSON.parse('{ "x" : ' + ep_str + ' }')
    }
    catch (e) {
        console.error(e)
        console.error(str, ep_str)

        return '""'
    }

    return ep_str
}
//--------------------------------------------------------------------------------------------------------
exports.on_multi_events = function(emitter, events, cb) {
    var received_events = {}

    for(var i in events) {
        add_listener(events[i])
    }

    function add_listener(event) {
        received_events[event] = false
        
        emitter.on(event, function() {
            received_events[event] = true
            if(check()) {
                cb()
            }
        })       
    }

    function check() {
        for(var i in received_events) {
            if(!received_events[i]) {
                return false
            }
        }

        return true
    }
}
//--------------------------------------------------------------------------------------------------------
var rotate_number_len = 26
var rotate_number_len_t = 8
var max_rotate_number = Math.pow(2, rotate_number_len)

exports.rotate_number = function(num, offset) {
    if (num >= max_rotate_number) {
        return
    }

    if (offset >= rotate_number_len || offset < 1) {
        return
    }

    var num_b = (num).toString(2)
    if (num_b.length > rotate_number_len) {
        return
    }

    var zero = ''
    for (var i = 0; i < (rotate_number_len - num_b.length); ++i) {
        zero += '0'
    }
    
    num_b = zero + num_b
    
    var left = num_b.substring(0, offset + 1)
    var right = num_b.substring(offset + 1)
    var new_num_b = right + left
    var new_num = (parseInt(new_num_b, 2)).toString(10)

    var zero = ''
    for (var i = 0; i < (rotate_number_len_t - new_num.length); ++i) {
        zero += '0'
    }

    return zero + new_num
}

exports.reverse_rotate_number = function(num, offset) {
    num = parseInt(num, 10)

    if (num >= max_rotate_number) {
        return
    }

    if (offset >= rotate_number_len || offset < 1) {
        return
    }

    var num_b = (num).toString(2)
    var zero = ''
    for (var i = 0; i < (rotate_number_len - num_b.length); ++i) {
        zero += '0'
    }

    num_b = zero + num_b
    offset = rotate_number_len - offset - 2

    var left  = num_b.substring(0, offset + 1)
    var right = num_b.substring(offset + 1)
    var new_num_b = right + left

    return parseInt(new_num_b, 2)
}
//--------------------------------------------------------------------------------------------------------
