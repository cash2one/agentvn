//--------------------------------------------------------------------------------------------------------
//telnetServer.js
//--------------------------------------------------------------------------------------------------------
var net    = require('net')
var telnet = require('telnet')
//--------------------------------------------------------------------------------------------------------
var cmd_prompt = '> '
//--------------------------------------------------------------------------------------------------------
var telnetUser = function(stream) {
    this.stream         = stream
    this.cursor         = 0

    this.data_buffer    = []
    this.line_buffer    = []

    this.cmd_history    = []
    this.last_cmd_index = undefined

    this.login          = false
    this.login_state    = 'init'
}
//--------------------------------------------------------------------------------------------------------
telnetUser.prototype.send = function(str, encoding, fd) {
    var send_str = str.replace(/\n/g, "\r\n");
    this.stream.write(send_str);
}
//--------------------------------------------------------------------------------------------------------
telnetUser.prototype.send_multichar = function(char, count) {
    var str = ''
    for (var i = 0; i < count; ++i) {
        str += char
    }

    this.send(str)
}
//--------------------------------------------------------------------------------------------------------
telnetUser.prototype.clear_input = function() {
    this.line_buffer = []
    this.data_buffer = []
    this.cursor = 0
    this.send('\n')
}
//--------------------------------------------------------------------------------------------------------
function redirect_stdout(user) {
    var old = process.stdout.write;    

    process.stdout.write = function(str, encoding, fd) {
        user.send(str)
    }     
    
    return old
}
exports.redirect_stdout = redirect_stdout
//--------------------------------------------------------------------------------------------------------
telnetUser.prototype.analyseData = function(recv_buffer) { 
    var old_write  = redirect_stdout(this)
    
    main_loop:
    for(var i=0; i<recv_buffer.length; i++) {
        switch(recv_buffer[i]) {
            case 0  :   break;
            
            case 3  :   this.processEnd();                 break;             //ctrl+c            
            
            case 8  :   this.processBackspace();           break main_loop;   //退格
            
            case 9  :   this.processTab();                 break;             //Tab
            
            case 10 :   break;                                                //换行

            case 13 :   this.processEnter();               break;             //回车 
           
            case 27 :   this.processEscape(recv_buffer);   break main_loop;   //转义字符

            case 127:   this.processBackspace();           break main_loop;   //DEL当作退格处理

            case 255:   break main_loop;                                      //协议控制字符      
      
            default :   this.processInput(recv_buffer[i]); break;             //普通输入
        }    
    }
    
    // recover stdout
    process.stdout.write = old_write;
}     
//--------------------------------------------------------------------------------------------------------
telnetUser.prototype.processInput = function(char) {
    this.line_buffer.splice(this.cursor, 0, char); 

    if (this.login_state == 'wait_password') {
        this.send('*')
    }
    else {
        this.send( Buffer(this.line_buffer.slice(this.cursor)).toString() );
    }

    this.cursor++;

    var count = this.line_buffer.length - this.cursor
    this.send_multichar('\b', count)
}
//--------------------------------------------------------------------------------------------------------
telnetUser.prototype.processTab = function() {
    //暂时当作四个空格处理
    for(var i=0; i<4; i++) {
        this.processInput(32);
    }
}
//--------------------------------------------------------------------------------------------------------
telnetUser.prototype.processBackspace = function() {
    if(this.cursor>0) {
        this.cursor--
        this.line_buffer.splice(this.cursor, 1)
        this.send('\b')
        this.send( Buffer(this.line_buffer.slice(this.cursor)).toString() )
        this.send(' ')

        var count = this.line_buffer.length - this.cursor + 1 
        this.send_multichar('\b', count)
    }
} 
//--------------------------------------------------------------------------------------------------------
telnetUser.prototype.processEscape = function(data) {
    switch(data[2]) {
                  //right   
        case 67 : if(this.cursor<this.line_buffer.length) {    
                     this.cursor++
                     this.send(data.toString())
                  }
                  break;                                           
                  //left
        case 68 : if(this.cursor>0) { 
                     this.cursor--
                     this.send(data.toString())                 
                  } 
                  break;  
                  //up    
        case 65 : if(this.last_cmd_index == -1) {
                     this.last_cmd_index = this.cmd_history.length-1
                     this.displayCommond(this.last_cmd_index)
                  }
                  else if(this.last_cmd_index > 0) {
                     this.last_cmd_index-- 
                     this.displayCommond(this.last_cmd_index)
                  }
                  break;                     
                  //dowm                                                                                           
        case 66 : if( this.last_cmd_index >= 0 && 
                      this.last_cmd_index < this.cmd_history.length-1) 
                  {    
                      this.last_cmd_index ++
                      this.displayCommond(this.last_cmd_index)
                  } 
                  break; 
        //其他暂不处理    
    }                                            
}    
//--------------------------------------------------------------------------------------------------------
telnetUser.prototype.processEnd = function() {
    if(this.line_buffer.length > 0 || this.data_buffer.length > 0) {
        this.clear_input()
        this.send(cmd_prompt)
    }
    else {
        this.closeStream();
    }
}
//--------------------------------------------------------------------------------------------------------
telnetUser.prototype.processEnter = function() {
    var data_buffer = this.data_buffer.concat(this.line_buffer)

    this.clear_input()

    if (this.login) {
        this.loadBuffer(data_buffer);
    }
    else {
        this.processLogin(data_buffer);
    }
}
//--------------------------------------------------------------------------------------------------------
telnetUser.prototype.loadBuffer = function(data_buffer) {
    var code_chunk;
    if(data_buffer[0] == 61) {
        code_chunk = "console.log(" +  Buffer(data_buffer.slice(1)).toString() + ")"
    }
    else {
        code_chunk = Buffer(data_buffer).toString();
    }

    try{
        __telnet_user = this
        eval(code_chunk);
    }
    catch(error) {
        if(error.message != "Unexpected end of input") {
            this.send(error.toString()+'\n');
        }
        else {
            this.data_buffer = data_buffer // recover input and wait continue input
            this.send("... ");

            return;
        }
    }

    this.send(cmd_prompt);
    this.recordCommond(data_buffer);
}
//--------------------------------------------------------------------------------------------------------
telnetUser.prototype.recordCommond = function(data_buffer) {
    if (data_buffer.length > 0) {
        if(this.cmd_history.length != 0) {
            var tail_cmd = this.cmd_history[this.cmd_history.length-1].toString()
            if(tail_cmd.localeCompare(data_buffer.toString()) == 0) { 
                this.last_cmd_index = -1
                return   
            }    
        }
            
        this.cmd_history.push(data_buffer)
        this.last_cmd_index = -1
    
        if(this.cmd_history.length > 40) {
            this.cmd_history.shift()
        }
    }    
}
//--------------------------------------------------------------------------------------------------------
telnetUser.prototype.cleanScreen = function(){
    this.send_multichar('\b', this.cursor)  
    this.send_multichar(' ' , this.line_buffer.length)
    this.send_multichar('\b', this.line_buffer.length)
}
//--------------------------------------------------------------------------------------------------------
telnetUser.prototype.displayCommond = function(index) {
    this.cleanScreen();
    
    this.send( Buffer(this.cmd_history[index]).toString() );   
    this.data_buffer = this.cmd_history[index].concat();      //复制数组  
    
    var pos = this.data_buffer.lastIndexOf(10);
    this.line_buffer = this.data_buffer.splice(pos+1);
    this.cursor = this.line_buffer.length;
}
//--------------------------------------------------------------------------------------------------------
telnetUser.prototype.closeStream = function() {
    this.data_buffer = []
    this.line_buffer = []
    this.cmd_history = []
    this.stream.end("\r\nbye\r\n");
}
//--------------------------------------------------------------------------------------------------------
telnetUser.prototype.account_req = function(stream) {
    stream.write('login as: ')
    this.login_state = 'wait_account'
}
//--------------------------------------------------------------------------------------------------------
telnetUser.prototype.password_req = function() {
    this.send('password: ')
    this.login_state = 'wait_password'
}
//--------------------------------------------------------------------------------------------------------
telnetUser.prototype.processLogin = function(data_buffer) {
    if (this.login_state == 'wait_account') {
        this.account = Buffer(data_buffer).toString()

        this.password_req()
        return
    }
    
    if (this.login_state == 'wait_password') {
        this.password = Buffer(data_buffer).toString()
        
        if (!this.check_account()) {
            this.login_state = 'failed'
            this.stream.write('\r\npassword or account error')
            this.closeStream()
        }
        else {
            this.login = true
            this.login_state = 'ok'
            this.send(cmd_prompt)
        }

        return
    }
}
//--------------------------------------------------------------------------------------------------------
var login_check = false
//--------------------------------------------------------------------------------------------------------
telnetUser.prototype.check_account = function() {
    if (!this.account || !this.password) {
        return false
    }

    if (!login_check) {
        return true
    }

    return login_check(this.account, this.password)
}
//--------------------------------------------------------------------------------------------------------
exports.set_login_check = function(check_fun) {
    login_check = check_fun
}
//--------------------------------------------------------------------------------------------------------
exports.listen = function(port, ip, cb) {
    var server = net.createServer(function(stream) {
        var user = new telnetUser(stream)

        telnet.cmd().IAC.WILL.echo.IAC.WILL.suppressGoAhead.send(stream)
        user.account_req(stream)

        stream.on('data', function(data) {
            user.analyseData(data)
        }) 

        stream.on('end', function() {
            user.closeStream()
        })  

        stream.on('error', function(err) {
            console.log('error:', err)
        })
    })

    server.listen(port, ip, cb)

    return server
}        
//--------------------------------------------------------------------------------------------------------
